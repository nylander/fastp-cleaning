from pathlib import Path
import textwrap
from snakemake.exceptions import WorkflowError
from rules.publications import publications

configfile: "config/config.yaml"

FASTADIR = Path(config["fastadir"])
FASTPDIR = Path(config["fastpdir"])
FASTQDIR = Path(config["fastqdir"])
INPUTDIR = Path(config["inputdir"])
LOGDIR = Path(config["logdir"])
OUTPUTDIR = Path(config["outputdir"])

all_outputs = []

citations = {publications["snakemake"]}

SAMPLES = set(glob_wildcards(INPUTDIR/config["fn_pattern"]).sample)

if len(SAMPLES) < 1:
    raise WorkflowError("Found no samples! Check input file pattern and path in config.yaml")
else:
    print(f"Found the following samples in inputdir using input filename pattern '{config['fn_pattern']}':\n{SAMPLES}")

report: "report/workflow.rst"

if config["run_fastp_merge"]:
    include: "rules/fastp_merge.smk"
else:
    include: "rules/fastp.smk"

if config["run_fastq_to_fasta"]:
    include: "rules/fastq_to_fasta.smk"

localrules: all

rule all:
    input:
        all_outputs

onerror:
    print("\n".join([
        "="*60,
        "There was an error executing the workflow!".center(60),
        "Check log output to see error, then rerun workflow.".center(60),
        "="*60,
        ])
    )

onsuccess:
    if config["report"]:
        from sys import argv
        from datetime import datetime
        report_datetime = datetime.now().strftime("%Y%m%d-%H%S")
        #citation_filename = f"output/citations-{report_datetime}.rst"
        citation_filename = f"output/citations.rst"
        with open(citation_filename, "w") as citation_file:
            for citation in sorted(citations):
                citation_file.write("* "+citation+"\n")
        #citations_link = Path("output/citations.rst")
        #if citations_link.exists():
        #    Path("output/citations.rst").unlink()
        #Path("citations.rst").symlink_to(citation_filename)
        # Begin old code
        shell("{snakemake_call} --unlock".format(snakemake_call=argv[0]))
        shell("{snakemake_call} --report {report}-{datetime}.html".format(
            snakemake_call=argv[0],
            report=config["report"],
            datetime=report_datetime,
            )
        )
        # End old code
        # Begin new code (tis 25 apr 2023 13:02:27).
        # From https://github.com/ctmrbio/stag-mwc/blob/master/workflow/Snakefile
        unlock_call = copy.deepcopy(argv)
        unlock_call.append("--unlock")
        report_args = copy.deepcopy(argv)
        report_args.extend(["--report", f"{config['report']}-{report_datetime}.zip"])
        skip = False
        report_call = []
        for arg in report_args:
            if arg == "--use-singularity":
                continue
            if arg == "--singularity-args":
                skip = True
                continue
            if arg == "--singularity-prefix":
                skip = True
                continue
            if arg == "--jobs":
                skip = True
                continue
            if skip:
                skip = False
                continue
            report_call.append(arg)
        subprocess.run(unlock_call)
        subprocess.run(report_call)
        # End new code

    print("\n".join([
        "="*60,
        "Workflow completed successfully".center(60),
        ])
    )
    print("\n".join([
        "",
        "="*60,
        ])
    )

